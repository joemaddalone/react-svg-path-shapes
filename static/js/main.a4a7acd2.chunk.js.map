{"version":3,"sources":["../../src/index.js","components/Svg.js","components/demos/basic/Rect.js","components/demos/basic/Square.js","components/demos/basic/Triangle.js","components/demos/basic/Circle.js","components/demos/basic/Ellipse.js","components/demos/basic/Segment.js","components/demos/basic/Sector.js","components/demos/basic/Polygon.js","components/demos/basic/RegPolygon.js","components/demos/basic/Polyline.js","components/demos/complex/Pie.js","components/demos/complex/Donut.js","components/demos/complex/SparkLine.js","App.js","index.js"],"names":["angleInRadians","angle","Math","polarToCartesian","centerX","centerY","radius","angleInDegrees","radians","x","y","Path","width","height","cx","cy","this","size","regPolygon","ellipse","rx","ry","points","relative","clone","start","move","line","val","sides","vertexIndices","Array","offset","index","theta","r","polygon","sq3","a","b","c","startAngle","endAngle","end","arcSweep","Svg","children","xmlns","viewBox","Rect","className","d","rect","toString","Square","square","Triangle","triangle","Circle","circle","Ellipse","Segment","segment","Sector","sector","Polygon","RegPolygon","pointsAbsolute","pointsRelative","Polyline","polyline","Pie","data","percentToDegree","p","sectors","total","forEach","i","percent","push","toComponent","key","fill","color","Donut","segments","strokeWidth","stroke","SparkLine","zero","pointDistance","parseInt","length","map","prev","unshift","reduce","App","basicDemos","pieData","href","C","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4a7acd2.chunk.js","sourcesContent":["import Path from 'react-svg-path';\n\nconst angleInRadians = (angle) => ((angle - 90) * Math.PI) / 180.0;\n\nconst polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\n  const radians = angleInRadians(angleInDegrees);\n\n  return {\n    x: centerX + radius * Math.cos(radians),\n    y: centerY + radius * Math.sin(radians)\n  };\n};\n\nPath.macro('rect', function (width, height, cx, cy) {\n  this.M(cx - width / 2, cy - height / 2)\n    .right(width)\n    .down(height)\n    .left(width)\n    .up(height)\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('square', function (size, cx, cy) {\n  return this.regPolygon(size, 4, cx, cy);\n});\n\nPath.macro('circle', function (size, cx, cy) {\n  return this.ellipse(size, size, cx, cy);\n});\n\nPath.macro('ellipse', function (width, height, cx, cy) {\n  const rx = width / 2;\n  const ry = height / 2;\n\n  this.M(cx + rx, cy)\n    .A(rx, ry, 0, 0, 1, cx - rx, cy)\n    .A(rx, ry, 0, 0, 1, cx + rx, cy)\n    .close()\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('polyline', function (points, relative = false) {\n  const clone = [...points];\n  const start = clone.shift();\n  const move = relative ? this.m : this.M;\n  const line = relative ? this.l : this.L;\n  move.apply(null, start);\n  clone.forEach((val) => {\n    line.apply(null, val);\n  });\n  return this;\n});\n\nPath.macro('polygon', function (points) {\n  this.polyline(points).close();\n  return this;\n});\n\nPath.macro('regPolygon', function (size, sides, cx, cy) {\n  const angle = 360 / sides;\n  const vertexIndices = Array.from(Array(sides).keys());\n  const offsetDeg = 90 - (180 - angle) / 2;\n  const offset = angleInRadians(offsetDeg);\n  const radius = size / 2;\n  const points = vertexIndices\n    .map((index) => {\n      return {\n        theta: offset + angleInRadians(angle * index),\n        r: radius\n      };\n    })\n    .map(({ r, theta }) => [\n      cx + r * Math.cos(theta),\n      cy + r * Math.sin(theta)\n    ]);\n  return this.polygon(points);\n});\n\nPath.macro('triangle', function (size, cx, cy) {\n  const sq3 = Math.sqrt(3);\n  const a = [cx, cy - (sq3 / 3) * size];\n  const b = [cx - size / 2, cy + (sq3 / 6) * size];\n  const c = [cx + size / 2, cy + (sq3 / 6) * size];\n  return this.polygon([a, b, c]).M(cx, cy);\n});\n\nPath.macro('sector', function (cx, cy, radius, startAngle, endAngle) {\n  const start = polarToCartesian(cx, cy, radius, endAngle);\n  const end = polarToCartesian(cx, cy, radius, startAngle);\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1;\n\n  this.M(start.x, start.y)\n    .A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n    .L(cx, cy)\n    .L(start.x, start.y)\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('segment', function (cx, cy, radius, startAngle, endAngle) {\n  const start = polarToCartesian(cx, cy, radius, endAngle);\n  const end = polarToCartesian(cx, cy, radius, startAngle);\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1;\n\n  this.M(start.x, start.y)\n    .A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n    .M(cx, cy);\n  return this;\n});\n\nexport default Path;\n","import React from 'react';\n\nconst Svg = ({ children, width, height }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      {children}\n    </svg>\n  );\n};\n\nexport default Svg;\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const Rect = () => (\n  <>\n    <h3 className='ui-header'>.rect(width, height, cx, cy)</h3>\n    <p>\n      .rect is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().rect(120, 60, 60, 60).toString()} />\n      <path d={new Path().rect(10, 5, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const Square = () => (\n  <>\n    <h3 className='ui-header'>.square(size, cx, cy)</h3>\n    <p>\n      .square is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().square(100, 50, 50).toString()} />\n      <path d={new Path().square(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const Triangle = () => (\n  <>\n    <h3 className='ui-header'>.triangle(size, cx, cy)</h3>\n    <p>\n      .triangle draws an equilateral triangle from center point (cx & cy). The\n      cursor is then moved to the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().triangle(95, 50, 60).toString()} />\n      <path d={new Path().triangle(10, 50, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const Circle = () => (\n  <>\n    <h3 className='ui-header'>.circle(size, cx, cy)</h3>\n    <p>\n      .circle is drawn from center points (cx & cy). The cursor is then moved to\n      the center points.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().circle(95, 50, 50).toString()} />\n      <path d={new Path().circle(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const Ellipse = () => (\n  <>\n    <h3 className='ui-header'>.ellipse(width, height, cx, cy)</h3>\n    <p>\n      .ellipse is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={155} height={120}>\n      <path d={new Path().ellipse(150, 75, 80, 50).toString()} />\n      <path\n        d={new Path().ellipse(15, 7.5, 80, 50).toString()}\n        className='filled'\n      />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const Segment = () => (\n  <>\n    <h3 className='ui-header'>\n      .segment(cx, cy, radius, startAngle, endAngle)\n    </h3>\n    <p>\n      .segment is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n\n    <Svg width={140} height={120}>\n      <path d={new Path().segment(60, 60, 50, 0, 270).toString()} />\n      <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const Sector = () => (\n  <>\n    <h3 className='ui-header'>.sector(cx, cy, radius, startAngle, endAngle)</h3>\n    <p>\n      .sector is drawn from center point (cx & cy). The cursor is then moved to\n      the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().sector(60, 60, 50, 0, 270).toString()} />\n      <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nconst points = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nexport const Polygon = () => (\n  <>\n    <h3 className='ui-header'>.polygon([points])</h3>\n    <p>\n      .polygon accepts an array of [x, y] coordinates and then draws lines\n      connecting those points. The path will start from the first point and end\n      on the first point - closing the shape.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().polygon(points).toString()} />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nexport const RegPolygon = () => (\n  <>\n    <h3 className='ui-header'>.regPolygon(size, sides, cx, cy)</h3>\n    <p>\n      .regPolygon is drawn from center point (cx & cy). The cursor is then moved\n      to the center point.\n    </p>\n    <Svg width={140} height={120}>\n      <path d={new Path().regPolygon(100, 6, 50, 50).toString()} />\n      <path\n        d={new Path().regPolygon(10, 6, 50, 50).toString()}\n        className='filled'\n      />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nconst pointsAbsolute = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nconst pointsRelative = [\n  [10, 60],\n  [30, -60],\n  [30, 60],\n  [-30, 60]\n];\nexport const Polyline = () => (\n  <>\n    <h3 className='ui-header'>.polyline([points], relative = false)</h3>\n    <p>\n      .polyline accepts an array of [x, y] coordinates and then draws lines\n      connecting those points. The path will start from the first point and end\n      on the last. points can be absolute or relative.\n    </p>\n    <h4 className='ui-header'>absolute</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsAbsolute).toString()} />\n    </Svg>\n    <h4 className='ui-header'>relative</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsRelative, true).toString()} />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nconst Pie = ({ size, cx, cy, data }) => {\n  const percentToDegree = (p) => (p / 100) * 360;\n  const sectors = [];\n  let total = 0;\n  data.forEach((d, i) => {\n    const startAngle = percentToDegree(total);\n    const endAngle = percentToDegree(total + d.percent);\n    const p = new Path();\n    p.sector(cx, cy, size / 2, startAngle, endAngle);\n    sectors.push(p.toComponent({ key: i, fill: d.color }));\n    total = total + d.percent;\n  });\n\n  return (\n    <Svg width={160} height={160}>\n      <g>{sectors}</g>\n    </Svg>\n  );\n};\n\nexport default Pie;\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nconst Donut = ({ size, width, cx, cy, data }) => {\n  const percentToDegree = (p) => (p / 100) * 360;\n  const segments = [];\n  let total = 0;\n  data.forEach((d, i) => {\n    const startAngle = percentToDegree(total);\n    const endAngle = percentToDegree(total + d.percent);\n    const p = new Path();\n    p.segment(cx, cy, (size-width) / 2, startAngle, endAngle);\n    segments.push(\n      p.toComponent({ key: i, strokeWidth: width, stroke: d.color, fill: 'none' })\n    );\n    total = total + d.percent;\n  });\n\n  return (\n    <Svg width={160} height={160}>\n      <g>{segments}</g>\n    </Svg>\n  );\n};\n\nexport default Donut;\n","import React, { useState } from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../../Svg';\n\nconst SparkLine = ({ width, height, data }) => {\n  const p = new Path();\n  const zero = height / 2;\n  const pointDistance = parseInt(width / data.length);\n  const points = data.map((d, index) => {\n    if (index !== 0) {\n      const prev = data[index - 1];\n      return [pointDistance, prev - d];\n    } else {\n      return [pointDistance, d];\n    }\n  });\n  points.unshift([0, (zero + data.reduce((a, b) => a + b) / 2)-10]);\n  p.polyline(points, true).rect(width, height, width / 2, height / 2);\n\n  return (\n    <Svg width={width+1} height={height+1}>\n      <path d={p.toString()} stroke='red' fill='none' />\n    </Svg>\n  );\n};\n\nexport default SparkLine;\n","import React from 'react';\nimport {\n  Rect,\n  Square,\n  Circle,\n  Ellipse,\n  Segment,\n  Sector,\n  Polygon,\n  RegPolygon,\n  Triangle,\n  Polyline\n} from './components/demos/basic';\n\nimport Pie from './components/demos/complex/Pie';\nimport Donut from './components/demos/complex/Donut';\nimport SparkLine from './components/demos/complex/SparkLine';\nimport Gear from './components/demos/complex/Gear';\n\nconst App = () => {\n  const basicDemos = [\n    Rect,\n    Square,\n    Triangle,\n    RegPolygon,\n    Ellipse,\n    Circle,\n    Sector,\n    Segment,\n    Polyline,\n    Polygon\n  ];\n\n  const pieData = [\n    {\n      color: 'red',\n      percent: 20\n    },\n    {\n      color: 'orange',\n      percent: 30\n    },\n    {\n      color: 'yellow',\n      percent: 50\n    }\n  ];\n\n  return (\n    <div>\n      <h2 className='ui-header'>react-svg-path-shapes</h2>\n      <a href='https://github.com/joemaddalone/react-svg-path-shapes'>\n        https://github.com/joemaddalone/react-svg-path-shapes\n      </a>\n      <div className='basic-shapes'>\n        <h2 className='ui-header'>Basic Shapes</h2>\n        {basicDemos.map((C, i) => (\n          <C key={i} />\n        ))}\n      </div>\n      <h2 className='ui-header'>Combining Shapes</h2>\n      <div>\n        <h3 className='ui-header'>multiple .sectors</h3>\n        <Pie size={150} cx={80} cy={80} data={pieData} />\n        <h3 className='ui-header'>multiple .segments</h3>\n        <Donut width={25} size={150} cx={80} cy={80} data={pieData} />\n        <h3 className='ui-header'>fitted .polyline</h3>\n        <SparkLine\n          width={300}\n          height={150}\n          data={[-10, -45, 10, 0, 35, 10, -9, 25, 15, 75]}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}