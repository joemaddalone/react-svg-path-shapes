{"version":3,"sources":["../../src/index.js","components/Svg.js","components/demos/Rect.js","components/demos/Square.js","components/demos/Triangle.js","components/demos/Circle.js","components/demos/Ellipse.js","components/demos/Segment.js","components/demos/Sector.js","components/demos/Polygon.js","components/demos/RegPolygon.js","components/demos/Polyline.js","App.js","index.js"],"names":["angleInRadians","angle","Math","polarToCartesian","centerX","centerY","radius","angleInDegrees","radians","x","y","Path","width","height","cx","cy","this","size","regPolygon","ellipse","rx","ry","points","relative","clone","start","move","line","sides","vertexIndices","Array","offset","theta","r","polygon","sq3","a","b","c","startAngle","endAngle","end","arcSweep","Svg","children","xmlns","viewBox","Rect","d","rect","toString","className","Square","square","Triangle","triangle","Circle","circle","Ellipse","Segment","segment","Sector","sector","Polygon","RegPolygon","pointsAbsolute","pointsRelative","Polyline","polyline","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3c674280.chunk.js","sourcesContent":["import Path from 'react-svg-path';\n\nconst angleInRadians = (angle) => ((angle - 90) * Math.PI) / 180.0;\n\nconst polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\n  const radians = angleInRadians(angleInDegrees);\n\n  return {\n    x: centerX + radius * Math.cos(radians),\n    y: centerY + radius * Math.sin(radians)\n  };\n};\n\nPath.macro('rect', function (width, height, cx, cy) {\n  this.M(cx - width / 2, cy - height / 2)\n    .right(width)\n    .down(height)\n    .left(width)\n    .up(height)\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('square', function (size, cx, cy) {\n  return this.regPolygon(size, 4, cx, cy);\n});\n\nPath.macro('circle', function (size, cx, cy) {\n  return this.ellipse(size, size, cx, cy);\n});\n\nPath.macro('ellipse', function (width, height, cx, cy) {\n  const rx = width / 2;\n  const ry = height / 2;\n\n  this.M(cx + rx, cy)\n    .A(rx, ry, 0, 0, 1, cx - rx, cy)\n    .A(rx, ry, 0, 0, 1, cx + rx, cy)\n    .close()\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('polyline', function (points, relative = false) {\n  const clone = [...points];\n  const start = clone.shift();\n  const move = relative ? this.m : this.M;\n  const line = relative ? this.l : this.L;\n  move.apply(null, start);\n  clone.forEach((val) => {\n    line.apply(null, val);\n  });\n  return this;\n});\n\nPath.macro('polygon', function (points) {\n  this.polyline(points).close();\n  return this;\n});\n\nPath.macro('regPolygon', function (size, sides, cx, cy) {\n  const angle = 360 / sides;\n  const vertexIndices = Array.from(Array(sides).keys());\n  const offsetDeg = 90 - (180 - angle) / 2;\n  const offset = angleInRadians(offsetDeg);\n  const radius = size / 2;\n  const points = vertexIndices\n    .map((index) => {\n      return {\n        theta: offset + angleInRadians(angle * index),\n        r: radius\n      };\n    })\n    .map(({ r, theta }) => [\n      cx + r * Math.cos(theta),\n      cy + r * Math.sin(theta)\n    ]);\n  return this.polygon(points);\n});\n\nPath.macro('triangle', function (size, cx, cy) {\n  const sq3 = Math.sqrt(3);\n  const a = [cx, cy - (sq3 / 3) * size];\n  const b = [cx - size / 2, cy + (sq3 / 6) * size];\n  const c = [cx + size / 2, cy + (sq3 / 6) * size];\n  return this.polygon([a, b, c]).M(cx, cy);\n});\n\nPath.macro('sector', function (cx, cy, radius, startAngle, endAngle) {\n  const start = polarToCartesian(cx, cy, radius, endAngle);\n  const end = polarToCartesian(cx, cy, radius, startAngle);\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1;\n\n  this.M(start.x, start.y)\n    .A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n    .L(cx, cy)\n    .L(start.x, start.y)\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('segment', function (cx, cy, radius, startAngle, endAngle) {\n  const start = polarToCartesian(cx, cy, radius, endAngle);\n  const end = polarToCartesian(cx, cy, radius, startAngle);\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1;\n\n  this.M(start.x, start.y)\n    .A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n    .M(cx, cy);\n  return this;\n});\n\nexport default Path;\n","import React from 'react';\n\nconst Svg = ({ children, width, height }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      {children}/\n    </svg>\n  );\n};\n\nexport default Svg;\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Rect = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().rect(120, 60, 60, 60).toString()} />\n    <path d={new Path().rect(10, 5, 60, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Square = () => (\n  <>\n    <Svg width={140} height={120}>\n      <path d={new Path().square(100, 50, 50).toString()} />\n      <path d={new Path().square(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Triangle = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().triangle(95, 50, 60).toString()} />\n    <path d={new Path().triangle(10, 50, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Circle = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().circle(95, 50, 50).toString()} />\n    <path d={new Path().circle(10, 50, 50).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Ellipse = () => (\n  <Svg width={155} height={120}>\n    <path d={new Path().ellipse(150, 75, 80, 50).toString()} />\n    <path\n      d={new Path().ellipse(15, 7.5, 80, 50).toString()}\n      className='filled'\n    />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Segment = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().segment(60, 60, 50, 0, 270).toString()} />\n    <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Sector = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().sector(60, 60, 50, 0, 270).toString()} />\n    <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nconst points = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nexport const Polygon = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().polygon(points).toString()} />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const RegPolygon = () => (\n  <>\n    <Svg width={140} height={120}>\n      <path d={new Path().regPolygon(100, 6, 50, 50).toString()} />\n      <path d={new Path().regPolygon(10, 6, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nconst pointsAbsolute = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nconst pointsRelative = [\n  [10, 60],\n  [30, -60],\n  [30, 60],\n  [-30, 60]\n];\nexport const Polyline = () => (\n  <>\n    <h4 className='ui-header'>absolute</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsAbsolute).toString()} />\n    </Svg>\n    <h4 className='ui-header'>relative</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsRelative, true).toString()} />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport {\n  Rect,\n  Square,\n  Circle,\n  Ellipse,\n  Segment,\n  Sector,\n  Polygon,\n  RegPolygon,\n  Triangle,\n  Polyline\n} from './components/demos';\n\nconst App = () => {\n  return (\n    <div>\n      <h2 className='ui-header'>react-svg-path-shapes</h2>\n      <a href='https://github.com/joemaddalone/react-svg-path-shapes'>\n        https://github.com/joemaddalone/react-svg-path-shapes\n      </a>\n      <h2 className='ui-header'>Demos</h2>\n      <h3 className='ui-header'>.rect(width, height, cx, cy)</h3>\n      <p>\n        .rect is drawn from center point (cx & cy). The cursor is then moved to\n        the center point.\n      </p>\n      <Rect />\n      <h3 className='ui-header'>.square(size, cx, cy)</h3>\n      <p>\n        .square is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Square />\n      <h3 className='ui-header'>.triangle(size, cx, cy)</h3>\n      <p>\n        .triangle draws an equilateral triangle from center point (cx & cy). The\n        cursor is then moved to the center point.\n      </p>\n      <Triangle />\n      <h3 className='ui-header'>.regPolygon(size, sides, cx, cy)</h3>\n      <p>\n        .regPolygon is drawn from center point (cx & cy). The cursor is then\n        moved to the center point.\n      </p>\n      <RegPolygon />\n      <h3 className='ui-header'>.ellipse(width, height, cx, cy)</h3>\n      <p>\n        .ellipse is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Ellipse />\n      <h3 className='ui-header'>.circle(size, cx, cy)</h3>\n      <p>\n        .circle is drawn from center points (cx & cy). The cursor is then moved\n        to the center points.\n      </p>\n      <Circle />\n      <h3 className='ui-header'>\n        .sector(cx, cy, radius, startAngle, endAngle)\n      </h3>\n      <p>\n        .sector is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Sector />\n      <h3 className='ui-header'>\n        .segment(cx, cy, radius, startAngle, endAngle)\n      </h3>\n      <p>\n        .segment is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Segment />\n      <h3 className='ui-header'>.polyline([points], relative = false)</h3>\n      <p>\n        .polyline accepts an array of [x, y] coordinates and then draws lines\n        connecting those points. The path will start from the first point and\n        end on the last. points can be absolute or relative.\n      </p>\n      <Polyline />\n      <h3 className='ui-header'>.polygon([points])</h3>\n      <p>\n        .polygon accepts an array of [x, y] coordinates and then draws lines\n        connecting those points. The path will start from the first point and\n        end on the first point - closing the shape.\n      </p>\n      <Polygon />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}