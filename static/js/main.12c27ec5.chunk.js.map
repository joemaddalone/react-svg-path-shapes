{"version":3,"sources":["../../src/index.js","components/Svg.js","components/demos/Rect.js","components/demos/Square.js","components/demos/Triangle.js","components/demos/Circle.js","components/demos/Ellipse.js","components/demos/Segment.js","components/demos/Sector.js","components/demos/Polygon.js","components/demos/Polyline.js","App.js","index.js"],"names":["polarToCartesian","centerX","centerY","radius","angleInDegrees","angleInRadians","Math","x","y","Path","width","height","this","size","rect","cx","cy","rx","ry","cols","rows","close","extra","colWidth","rowHeight","Array","length","_","index","M","points","relative","start","move","line","val","sq3","a","b","c","startAngle","endAngle","end","arcSweep","Svg","children","xmlns","viewBox","Rect","d","toString","className","Square","square","Triangle","triangle","Circle","circle","Ellipse","ellipse","Segment","segment","Sector","sector","Polygon","polygon","Polyline","polyline","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12c27ec5.chunk.js","sourcesContent":["import Path from 'react-svg-path'\n\nconst polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\n  var angleInRadians = ((angleInDegrees - 90) * Math.PI) / 180.0\n\n  return {\n    x: centerX + radius * Math.cos(angleInRadians),\n    y: centerY + radius * Math.sin(angleInRadians)\n  }\n}\n\nPath.macro('rect', function (width, height, x, y) {\n  if (x && y) {\n    this.M(x - width / 2, y - height / 2) // only move if x & y are defined\n  }\n  this.right(width).down(height).left(width).up(height)\n  return this\n})\n\nPath.macro('square', function (size, x, y) {\n  return this.rect(size, size, x, y)\n})\n\nPath.macro('circle', function (size, x, y) {\n  // return this.ellipse(size, size, x, y)\n  if (x && y) {\n    this.M(x, y) // only move if x & y are defined\n  }\n  const radius = size / 2\n  this.m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, size, 0)\n    .a(radius, radius, 0, 1, 0, -size, 0)\n    .close()\n  return this\n})\n\nPath.macro('ellipse', function (width, height, cx, cy) {\n  const rx = width / 2\n  const ry = height / 2\n\n  this.M(cx, cy) // only move if x & y are defined\n  this.M(cx + rx, cy)\n    .A(rx, ry, 0, 0, 1, cx, cy + ry)\n    .A(rx, ry, 0, 0, 1, cx - rx, cy)\n    .A(rx, ry, 0, 0, 1, cx + rx, cy)\n    .close()\n  return this\n})\n\nPath.macro('grid', function (x, y, width, height, cols, rows, close = true) {\n  const extra = close ? 1 : 0\n  const colWidth = width / cols\n  const rowHeight = height / rows\n  this.M(x, y)\n  if (cols) {\n    Array.from({ length: cols + extra }).map((_, index) =>\n      this.M(x + index * colWidth, y).down(height)\n    )\n  }\n  if (rows) {\n    Array.from({ length: rows + extra }).map((_, index) =>\n      this.M(x, y + index * rowHeight, y).right(width)\n    )\n  }\n  return this\n})\n// Path.macro('sparkline', function (x, y, width, data) {\n//   this.moveTo(x, y)\n//   const pointDistance = parseInt(width / data.length)\n//   data.forEach((val, index, arr) => {\n//     if (index !== 0) {\n//       const prev = arr[index - 1]\n//       this.l(pointDistance, prev - val)\n//     } else {\n//       this.l(pointDistance, -val)\n//     }\n//   })\n//   return this\n// })\n\nPath.macro('polyline', function (points, relative = false) {\n  const start = points.shift()\n  const move = relative ? this.m : this.M\n  const line = relative ? this.l : this.L\n  move.apply(null, start)\n  points.forEach((val) => {\n    line.apply(null, val)\n  })\n  return this\n})\n\nPath.macro('polygon', function (points, relative = false) {\n  this.polyline(points).close()\n  return this\n})\n\n// Path.macro('stepline', function (x, y, width, data) {\n//   this.moveTo(x, y)\n//   const pointDistance = parseInt(width / data.length)\n//   data.forEach((val, index, arr) => {\n//     const prev = index === 0 ? 0 : arr[index - 1]\n//     this[prev > val ? 'down' : 'up'](Math.abs(prev - val))\n//     if (index !== arr.length - 1) {\n//       this.right(pointDistance)\n//     }\n//   })\n//   return this\n// })\n\nPath.macro('triangle', function (size, x, y) {\n  const sq3 = Math.sqrt(3)\n  const a = [x, y - (sq3 / 3) * size]\n  const b = [x - size / 2, y + (sq3 / 6) * size]\n  const c = [x + size / 2, y + (sq3 / 6) * size]\n\n  this.moveTo(...a)\n    .lineTo(...b)\n    .lineTo(...c)\n    .close()\n  return this\n})\n\nPath.macro('sector', function (x, y, radius, startAngle, endAngle) {\n  const start = polarToCartesian(x, y, radius, endAngle)\n  const end = polarToCartesian(x, y, radius, startAngle)\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1\n\n  this.M(start.x, start.y)\n    .A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n    .L(x, y)\n    .L(start.x, start.y)\n  return this\n})\n\nPath.macro('segment', function (x, y, radius, startAngle, endAngle) {\n  const start = polarToCartesian(x, y, radius, endAngle)\n  const end = polarToCartesian(x, y, radius, startAngle)\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1\n\n  this.M(start.x, start.y).A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n  return this\n})\n\nexport default Path\n","import React from 'react'\n\nconst Svg = ({ children, width, height }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      {children}/\n    </svg>\n  )\n}\n\nexport default Svg\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg';\n\nexport const Rect = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().rect(120, 60, 60, 60).toString()} />\n    <path d={new Path().rect(10, 5, 60, 60).toString()} className='filled' />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\nexport const Square =  () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().square(100, 50, 50).toString()} />\n    <path d={new Path().square(10, 50, 50).toString()} className='filled' />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\nexport const Triangle = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().triangle(95, 50, 60).toString()} />\n    <path d={new Path().triangle(10, 50, 60).toString()} className='filled' />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\nexport const Circle = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().circle(95, 50, 50).toString()} />\n    <path d={new Path().circle(10, 50, 50).toString()} className='filled' />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\nexport const Ellipse = () => (\n  <Svg width={155} height={120}>\n    <path d={new Path().ellipse(150, 75, 80, 50).toString()} />\n    <path d={new Path().ellipse(15, 7.5, 80, 50).toString()} className='filled' />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\nexport const Segment = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().segment(60, 60, 50, 0, 270).toString()} />\n    <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\nexport const Sector = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().sector(60, 60, 50, 0, 270).toString()} />\n    <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\n// <svg width={800} height={160}>\n\nconst points = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n]\n\nexport const Polygon = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().polygon(points).toString()} />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport Svg from '../Svg'\n\nconst points = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n]\nexport const Polyline = () => (\n  <Svg width={260} height={160}>\n    <path d={new Path().polyline(points).toString()} />\n  </Svg>\n)\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\nimport {\n  Rect,\n  Square,\n  Circle,\n  Ellipse,\n  Segment,\n  Sector,\n  Polygon,\n  Triangle,\n  Polyline\n} from './components/demos'\n\nconst data = [-10, -45, 10, 0, -55, 10, -9, 25, 15, 80]\n\nconst App = () => {\n  return (\n    <div>\n      <h2 className='ui-header'>react-svg-path-shapes</h2>\n      <a href='https://github.com/joemaddalone/react-svg-path-shapes'>\n        https://github.com/joemaddalone/react-svg-path-shapes\n      </a>\n\n      <h3 className='ui-header'>Demos</h3>\n      <h2>.rect(width, height, x, y)</h2>\n      <Rect />\n      <h2>.square(size, x, y)</h2>\n      <Square />\n      <h2>.ellipse(width, height, x, y)</h2>\n      <Ellipse />\n      <h2>.circle(size, x, y)</h2>\n      <Circle />\n      <h2>.sector(x, y, radius, startAngle, endAngle)</h2>\n      <Sector />\n      <h2>.segment(x, y, radius, startAngle, endAngle)</h2>\n      <Segment />\n      <h2>.triangle(size, x, y)</h2>\n      <Triangle />\n      <h2>.polyline(points, relative = false)</h2>\n      <Polyline />\n      <h2>.polygon(points, relative = false)</h2>\n      <Polygon />\n      {/* <h2>.grid()</h2>\n      <Grid /> */}\n      {/* <h2>combining shapes</h2>\n      <svg width={202} height={250}>\n        <path\n          d={new Path().grid(0, 0, 200, 200, 10, 10).toString()}\n          style={{ stroke: '#ccc' }}\n        />\n        <path\n          d={new Path().polyline(data.concat(data)).toString()}\n          style={{ stroke: 'green', strokeWidth: 2 }}\n        />\n      </svg> */}\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}