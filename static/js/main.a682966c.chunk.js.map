{"version":3,"sources":["../../src/index.js","components/Svg.js","components/demos/Rect.js","components/demos/Square.js","components/demos/Triangle.js","components/demos/Circle.js","components/demos/Ellipse.js","components/demos/Segment.js","components/demos/Sector.js","components/demos/Polygon.js","components/demos/RegPolygon.js","components/demos/Polyline.js","App.js","index.js"],"names":["angleInRadians","angle","Math","polarToCartesian","centerX","centerY","radius","angleInDegrees","radians","x","y","Path","width","height","cx","cy","this","size","regPolygon","ellipse","rx","ry","points","relative","clone","start","move","line","val","sides","vertexIndices","Array","offset","index","theta","r","polygon","sq3","a","b","c","startAngle","endAngle","end","arcSweep","Svg","children","xmlns","viewBox","Rect","d","rect","toString","className","Square","square","Triangle","triangle","Circle","circle","Ellipse","Segment","segment","Sector","sector","Polygon","RegPolygon","pointsAbsolute","pointsRelative","Polyline","polyline","App","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a682966c.chunk.js","sourcesContent":["import Path from 'react-svg-path';\n\nconst angleInRadians = (angle) => ((angle - 90) * Math.PI) / 180.0;\n\nconst polarToCartesian = (centerX, centerY, radius, angleInDegrees) => {\n  const radians = angleInRadians(angleInDegrees);\n\n  return {\n    x: centerX + radius * Math.cos(radians),\n    y: centerY + radius * Math.sin(radians)\n  };\n};\n\nPath.macro('rect', function (width, height, cx, cy) {\n  this.M(cx - width / 2, cy - height / 2)\n    .right(width)\n    .down(height)\n    .left(width)\n    .up(height)\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('square', function (size, cx, cy) {\n  return this.regPolygon(size, 4, cx, cy);\n});\n\nPath.macro('circle', function (size, cx, cy) {\n  return this.ellipse(size, size, cx, cy);\n});\n\nPath.macro('ellipse', function (width, height, cx, cy) {\n  const rx = width / 2;\n  const ry = height / 2;\n\n  this.M(cx + rx, cy)\n    .A(rx, ry, 0, 0, 1, cx - rx, cy)\n    .A(rx, ry, 0, 0, 1, cx + rx, cy)\n    .close()\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('polyline', function (points, relative = false) {\n  const clone = [...points];\n  const start = clone.shift();\n  const move = relative ? this.m : this.M;\n  const line = relative ? this.l : this.L;\n  move.apply(null, start);\n  clone.forEach((val) => {\n    line.apply(null, val);\n  });\n  return this;\n});\n\nPath.macro('polygon', function (points, relative = false) {\n  this.polyline(points, relative).close();\n  return this;\n});\n\nPath.macro('regPolygon', function (size, sides, cx, cy) {\n  const angle = 360 / sides;\n  const vertexIndices = Array.from(Array(sides).keys());\n  const offsetDeg = 90 - (180 - angle) / 2;\n  const offset = angleInRadians(offsetDeg);\n  const radius = size / 2;\n  const points = vertexIndices\n    .map((index) => {\n      return {\n        theta: offset + angleInRadians(angle * index),\n        r: radius\n      };\n    })\n    .map(({ r, theta }) => [\n      cx + r * Math.cos(theta),\n      cy + r * Math.sin(theta)\n    ]);\n  return this.polygon(points);\n});\n\nPath.macro('triangle', function (size, cx, cy) {\n  const sq3 = Math.sqrt(3);\n  const a = [cx, cy - (sq3 / 3) * size];\n  const b = [cx - size / 2, cy + (sq3 / 6) * size];\n  const c = [cx + size / 2, cy + (sq3 / 6) * size];\n  return this.polygon([a, b, c]).M(cx, cy);\n});\n\nPath.macro('sector', function (cx, cy, radius, startAngle, endAngle) {\n  const start = polarToCartesian(cx, cy, radius, endAngle);\n  const end = polarToCartesian(cx, cy, radius, startAngle);\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1;\n\n  this.M(start.x, start.y)\n    .A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n    .L(cx, cy)\n    .L(start.x, start.y)\n    .M(cx, cy);\n  return this;\n});\n\nPath.macro('segment', function (cx, cy, radius, startAngle, endAngle) {\n  const start = polarToCartesian(cx, cy, radius, endAngle);\n  const end = polarToCartesian(cx, cy, radius, startAngle);\n  const arcSweep = endAngle - startAngle <= 180 ? 0 : 1;\n\n  this.M(start.x, start.y)\n    .A(radius, radius, 0, arcSweep, 0, end.x, end.y)\n    .M(cx, cy);\n  return this;\n});\n\nexport default Path;\n","import React from 'react';\n\nconst Svg = ({ children, width, height }) => {\n  return (\n    <svg\n      xmlns='http://www.w3.org/2000/svg'\n      width={width}\n      height={height}\n      viewBox={`0 0 ${width} ${height}`}\n    >\n      {children}/\n    </svg>\n  );\n};\n\nexport default Svg;\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Rect = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().rect(120, 60, 60, 60).toString()} />\n    <path d={new Path().rect(10, 5, 60, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Square = () => (\n  <>\n    <Svg width={140} height={120}>\n      <path d={new Path().square(100, 50, 50).toString()} />\n      <path d={new Path().square(10, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Triangle = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().triangle(95, 50, 60).toString()} />\n    <path d={new Path().triangle(10, 50, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Circle = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().circle(95, 50, 50).toString()} />\n    <path d={new Path().circle(10, 50, 50).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Ellipse = () => (\n  <Svg width={155} height={120}>\n    <path d={new Path().ellipse(150, 75, 80, 50).toString()} />\n    <path\n      d={new Path().ellipse(15, 7.5, 80, 50).toString()}\n      className='filled'\n    />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Segment = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().segment(60, 60, 50, 0, 270).toString()} />\n    <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const Sector = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().sector(60, 60, 50, 0, 270).toString()} />\n    <path d={new Path().circle(10, 60, 60).toString()} className='filled' />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nconst points = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nexport const Polygon = () => (\n  <Svg width={140} height={120}>\n    <path d={new Path().polygon(points).toString()} />\n  </Svg>\n);\n","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nexport const RegPolygon = () => (\n  <>\n    <Svg width={140} height={120}>\n      <path d={new Path().regPolygon(100, 6, 50, 50).toString()} />\n      <path d={new Path().regPolygon(10, 6, 50, 50).toString()} className='filled' />\n    </Svg>\n  </>\n);","import React from 'react';\nimport Path from 'react-svg-path-shapes';\nimport Svg from '../Svg';\n\nconst pointsAbsolute = [\n  [10, 60],\n  [40, 0],\n  [70, 60],\n  [40, 120]\n];\n\nconst pointsRelative = [\n  [10, 60],\n  [30, -60],\n  [30, 60],\n  [-30, 60]\n];\nexport const Polyline = () => (\n  <>\n    <h4 className='ui-header'>absolute</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsAbsolute).toString()} />\n    </Svg>\n    <h4 className='ui-header'>relative</h4>\n    <Svg width={260} height={160}>\n      <path d={new Path().polyline(pointsRelative, true).toString()} />\n    </Svg>\n  </>\n);\n","import React from 'react';\nimport {\n  Rect,\n  Square,\n  Circle,\n  Ellipse,\n  Segment,\n  Sector,\n  Polygon,\n  RegPolygon,\n  Triangle,\n  Polyline\n} from './components/demos';\n\nconst App = () => {\n  return (\n    <div>\n      <h2 className='ui-header'>react-svg-path-shapes</h2>\n      <a href='https://github.com/joemaddalone/react-svg-path-shapes'>\n        https://github.com/joemaddalone/react-svg-path-shapes\n      </a>\n      <h2 className='ui-header'>Demos</h2>\n      <h3 className='ui-header'>.rect(width, height, cx, cy)</h3>\n      <p>\n        .rect is drawn from center point (cx & cy). The cursor is then moved to\n        the center point.\n      </p>\n      <Rect />\n      <h3 className='ui-header'>.square(size, cx, cy)</h3>\n      <p>\n        .square is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Square />\n      <h3 className='ui-header'>.triangle(size, cx, cy)</h3>\n      <p>\n        .triangle is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Triangle />\n      <h3 className='ui-header'>.regPolygon(size, sides, cx, cy)</h3>\n      <p>\n        .regPolygon is drawn from center point (cx & cy). The cursor is then\n        moved to the center point.\n      </p>\n      <RegPolygon />\n      <h3 className='ui-header'>.ellipse(width, height, cx, cy)</h3>\n      <p>\n        .ellipse is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Ellipse />\n      <h3 className='ui-header'>.circle(size, cx, cy)</h3>\n      <p>\n        .circle is drawn from center points (cx & cy). The cursor is then moved\n        to the center points.\n      </p>\n      <Circle />\n      <h3 className='ui-header'>\n        .sector(cx, cy, radius, startAngle, endAngle)\n      </h3>\n      <p>\n        .sector is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Sector />\n      <h3 className='ui-header'>\n        .segment(cx, cy, radius, startAngle, endAngle)\n      </h3>\n      <p>\n        .segment is drawn from center point (cx & cy). The cursor is then moved\n        to the center point.\n      </p>\n      <Segment />\n      <h3 className='ui-header'>.polyline(points, relative = false)</h3>\n      <Polyline />\n      <h3 className='ui-header'>.polygon(points, relative = false)</h3>\n      <Polygon />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}