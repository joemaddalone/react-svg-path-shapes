{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Path","size","x","y","this","radius","width","height","cols","rows","close","extra","colWidth","rowHeight","Array","length","_","index","M","data","pointDistance","parseInt","val","arr","prev","Math","rest","sq3","a","b","c","App","d","grid","toString","square","style","fill","circle","triangle","polyline","stepline","polygon","stroke","strokeWidth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.787ad0be.chunk.js","sourcesContent":["import Path from 'react-svg-path'\n\nPath.macro('square', function (size, x, y) {\n  if (x && y) {\n    this.M(x - size / 2, y - size / 2) // only move if x & y are defined\n  }\n  this.right(size).down(size).left(size).up(size)\n  return this\n})\n\nPath.macro('circle', function (size, x, y) {\n  if (x && y) {\n    this.M(x, y) // only move if x & y are defined\n  }\n  const radius = size / 2\n  this.m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n    .close()\n  return this\n})\n\nPath.macro('grid', function (x, y, width, height, cols, rows, close = true) {\n  const extra = close ? 1 : 0\n  const colWidth = width / cols\n  const rowHeight = height / rows\n  this.M(x, y)\n  if (cols) {\n    Array.from({ length: cols + extra }).map((_, index) =>\n      this.M(x + index * colWidth, y).down(height)\n    )\n  }\n  if (rows) {\n    Array.from({ length: rows + extra }).map((_, index) =>\n      this.M(x, y + index * rowHeight, y).right(width)\n    )\n  }\n  return this\n})\nPath.macro('polyline', function (x, y, width, data) {\n  this.moveTo(x, y)\n  const pointDistance = parseInt(width / data.length)\n  data.forEach((val, index, arr) => {\n    if (index !== 0) {\n      const prev = arr[index - 1]\n      this.l(pointDistance, prev - val)\n    } else {\n      this.l(pointDistance, -val)\n    }\n  })\n  return this\n})\n\nPath.macro('stepline', function (x, y, width, data) {\n  this.moveTo(x, y)\n  const pointDistance = parseInt(width / data.length)\n  data.forEach((val, index, arr) => {\n    const prev = index === 0 ? 0 : arr[index - 1]\n    this[prev > val ? 'down' : 'up'](Math.abs(prev - val))\n    if (index !== arr.length - 1) {\n      this.right(pointDistance)\n    }\n  })\n  return this\n})\n\nPath.macro('polygon', function (x, y, ...rest) {\n  this.moveTo(x, y)\n  rest.forEach((val) => {\n    this.L.apply(null, val)\n  })\n  this.close()\n  return this\n})\n\nPath.macro('triangle', function (size, x, y) {\n  const sq3 = Math.sqrt(3)\n  const a = [x, y - (sq3 / 3) * size]\n  const b = [x - size / 2, y + (sq3 / 6) * size]\n  const c = [x + size / 2, y + (sq3 / 6) * size]\n\n  this.moveTo(...a)\n    .lineTo(...b)\n    .lineTo(...c)\n    .close()\n  return this\n})\n\nexport default Path\n","import React from 'react'\nimport Path from 'react-svg-path-shapes'\n\nconst data = [-10, -45, 10, 0, 35, 10, -9, 25, 15, 75]\n\n\nconst App = () => {\n  return (\n    <div>\n      <h2>.grid()</h2>\n      <svg width={250} height={250}>\n        <path d={new Path().grid(1, 1, 248, 248, 10, 10).toString()} />\n      </svg>\n      <h2>.square()</h2>\n      <svg width={120} height={120}>\n        <path d={new Path().square(100, 50, 50).toString()} />\n        <path\n          d={new Path().square(10, 50, 50).toString()}\n          style={{ fill: 'rebeccapurple' }}\n        />\n      </svg>\n      <h2>.circle()</h2>\n      <svg width={110} height={120}>\n        <path d={new Path().circle(95, 50, 50).toString()} />\n        <path\n          d={new Path().circle(10, 50, 50).toString()}\n          style={{ fill: 'rebeccapurple' }}\n        />\n      </svg>\n      <h2>.triangle()</h2>\n      <svg width={110} height={110}>\n        <path d={new Path().triangle(95, 50, 60).toString()} />\n        <path\n          d={new Path().triangle(10, 50, 60).toString()}\n          style={{ fill: 'rebeccapurple' }}\n        />\n      </svg>\n      <h2>.polyline()</h2>\n      <svg width={260} height={160}>\n        <path d={new Path().polyline(10, 100, 240, data).toString()} />\n      </svg>\n      <h2>.stepline()</h2>\n      <svg width={800} height={160}>\n        <path d={new Path().stepline(10, 100, 250, data).toString()} />\n      </svg>\n      <h2>.polygon()</h2>\n      <svg width={800} height={160}>\n        <path\n          d={new Path()\n            .polygon(10, 60, [40, 0], [70, 60], [40, 120])\n            .toString()}\n        />\n      </svg>\n      <h2>combining shapes</h2>\n      <svg width={305} height={155}>\n        <path\n          d={new Path().grid(0, 0, 300, 150, 10, 10).toString()}\n          style={{ stroke: '#ccc' }}\n        />\n        <path\n          d={new Path().polyline(0, 100, 300, data).toString()}\n          style={{ stroke: 'green', strokeWidth: 2 }}\n        />\n      </svg>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}