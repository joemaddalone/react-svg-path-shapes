{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Path","size","x","y","this","radius","w","h","width","height","cols","rows","close","extra","colWidth","rowHeight","Array","length","index","data","pointDistance","parseInt","prev","arr","Math","App","d","grid","toString","square","circle","polyline","stepline","style","stroke","strokeWidth","ReactDOM","render","document","getElementById"],"mappings":"mNAEAA,oBAAqB,SAAUC,EAAMC,EAAGC,GAKtC,OAJID,GAAJ,GACEE,KAAA,OAEFA,KAAA,+BACA,QAGFJ,oBAAqB,SAAUC,EAAMC,EAAGC,GAClCD,GAAJ,GACEE,KAAA,OAEF,IAAMC,EAASJ,EAAf,EAIA,OAHAG,KAAA,sBAC8BC,EAD9B,kBAEgCA,EAFhC,GAGA,QAGFL,sBAAuB,SAAUM,EAAGC,EAAGL,EAAGC,GAKxC,OAJAC,KAAA,UACME,EADN,qBAIA,QAGFN,kBAAmB,SAAUE,EAAGC,EAAGK,EAAOC,EAAQC,EAAMC,GAAoB,WAAdC,IAAc,yDACpEC,EAAQD,EAAQ,EAAtB,EACME,EAAWN,EAAjB,EACMO,EAAYN,EAAlB,EAYA,OAXAL,KAAA,OACA,GACEY,WAAW,CAAEC,OAAQP,EAAOG,IAA5BG,KAAyC,qBACvC,IAAOd,EAAIgB,EAAX,UADFF,MAIF,GACEA,WAAW,CAAEC,OAAQN,EAAOE,IAA5BG,KAAyC,qBACvC,MAAUb,EAAIe,EAAd,WADFF,MAIF,QAGFhB,sBAAuB,SAAUE,EAAGC,EAAGK,EAAOW,GAAM,WAClDf,KAAA,YACA,IAAMgB,EAAgBC,SAASb,EAAQW,EAAvC,QASA,OARAA,WAAa,gBACX,OAAID,EAAa,CACf,IAAMI,EAAOC,EAAIL,EAAjB,GACA,MAAsBI,EAAtB,QAEA,aAGJ,QAGFtB,sBAAuB,SAAUE,EAAGC,EAAGK,EAAOW,GAAM,WAClDf,KAAA,YACA,IAAMgB,EAAgBC,SAASb,EAAQW,EAAvC,QAQA,OAPAA,WAAa,gBACX,IAAMG,EAAOJ,QAAkBK,EAAIL,EAAnC,GACA,EAAKI,WAAL,MAAiCE,SAASF,EAA1C,IACIJ,IAAUK,SAAd,GACE,cAGJ,QCnEF,IAAMJ,EAAO,EAAE,IAAK,GAAI,GAAI,EAAG,GAAI,IAAK,EAAG,GAAI,GAAI,IAwCpCM,EAtCH,WACV,OACE,6BACE,uCACA,yBAAKjB,MAAO,IAAKC,OAAQ,KACvB,0BAAMiB,GAAG,IAAI1B,KAAO2B,KAAK,EAAG,EAAG,IAAK,IAAK,GAAI,IAAIC,cAEnD,yCACA,yBAAKpB,MAAO,IAAKC,OAAQ,KACvB,0BAAMiB,GAAG,IAAI1B,KAAO6B,OAAO,IAAK,GAAI,IAAID,cAE1C,yCACA,yBAAKpB,MAAO,IAAKC,OAAQ,KACvB,0BAAMiB,GAAG,IAAI1B,KAAO8B,OAAO,GAAI,GAAI,IAAIF,cAEzC,2CACA,yBAAKpB,MAAO,IAAKC,OAAQ,KACvB,0BAAMiB,GAAG,IAAI1B,KAAO+B,SAAS,GAAI,IAAK,IAAKZ,GAAMS,cAEnD,2CACA,yBAAKpB,MAAO,IAAKC,OAAQ,KACvB,0BAAMiB,GAAG,IAAI1B,KAAOgC,SAAS,GAAI,IAAK,IAAKb,GAAMS,cAEnD,gDACA,yBAAKpB,MAAO,IAAKC,OAAQ,KACvB,0BACEiB,GAAG,IAAI1B,KAAO2B,KAAK,EAAG,EAAG,IAAK,IAAK,GAAI,IAAIC,WAC3CK,MAAO,CAAEC,OAAQ,UAEnB,0BACER,GAAG,IAAI1B,KAAO+B,SAAS,EAAG,IAAK,IAAKZ,GAAMS,WAC1CK,MAAO,CAAEC,OAAQ,QAASC,YAAa,QC/BjDC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.aea02370.chunk.js","sourcesContent":["import Path from 'react-svg-path'\n\nPath.macro('square', function (size, x, y) {\n  if (x && y) {\n    this.M(x, y) // only move if x & y are defined\n  }\n  this.right(size).down(size).left(size).up(size)\n  return this\n})\n\nPath.macro('circle', function (size, x, y) {\n  if (x && y) {\n    this.M(x, y) // only move if x & y are defined\n  }\n  const radius = size / 2\n  this.m(-radius, 0)\n    .a(radius, radius, 0, 1, 0, radius * 2, 0)\n    .a(radius, radius, 0, 1, 0, -(radius * 2), 0)\n  return this\n})\n\nPath.macro('triangle', function (w, h, x, y) {\n  this.M(x, y) // only move if x & y are defined\n    .l(-w / 2, h)\n    .right(w)\n    .L(x, y)\n  return this\n})\n\nPath.macro('grid', function (x, y, width, height, cols, rows, close = true) {\n  const extra = close ? 1 : 0\n  const colWidth = width / cols\n  const rowHeight = height / rows\n  this.M(x, y)\n  if (cols) {\n    Array.from({ length: cols + extra }).map((_, index) =>\n      this.M(x + index * colWidth, y).down(height)\n    )\n  }\n  if (rows) {\n    Array.from({ length: rows + extra }).map((_, index) =>\n      this.M(x, y + index * rowHeight, y).right(width)\n    )\n  }\n  return this\n})\n// [-10, -45, 10, 0, 35, 10, -9, 25, 15, 75]\nPath.macro('polyline', function (x, y, width, data) {\n  this.moveTo(x, y)\n  const pointDistance = parseInt(width / data.length)\n  data.forEach((val, index, arr) => {\n    if (index !== 0) {\n      const prev = arr[index - 1]\n      this.l(pointDistance, prev - val)\n    } else {\n      this.l(pointDistance, -val)\n    }\n  })\n  return this\n})\n\nPath.macro('stepline', function (x, y, width, data) {\n  this.moveTo(x, y)\n  const pointDistance = parseInt(width / data.length)\n  data.forEach((val, index, arr) => {\n    const prev = index === 0 ? 0 : arr[index - 1]\n    this[prev > val ? 'down' : 'up'](Math.abs(prev - val))\n    if (index !== arr.length - 1) {\n      this.right(pointDistance)\n    }\n  })\n  return this\n})\n","import React from 'react'\nimport Path from 'react-svg-path'\nimport 'react-svg-path-shapes'\n\nconst data = [-10, -45, 10, 0, 35, 10, -9, 25, 15, 75]\n\nconst App = () => {\n  return (\n    <div>\n      <h2>.grid()</h2>\n      <svg width={250} height={250}>\n        <path d={new Path().grid(1, 1, 248, 248, 10, 10).toString()} />\n      </svg>\n      <h2>.square()</h2>\n      <svg width={120} height={120}>\n        <path d={new Path().square(100, 10, 10).toString()} />\n      </svg>\n      <h2>.circle()</h2>\n      <svg width={110} height={120}>\n        <path d={new Path().circle(95, 55, 60).toString()} />\n      </svg>\n      <h2>.polyline()</h2>\n      <svg width={260} height={160}>\n        <path d={new Path().polyline(10, 100, 240, data).toString()} />\n      </svg>\n      <h2>.stepline()</h2>\n      <svg width={800} height={160}>\n        <path d={new Path().stepline(10, 100, 250, data).toString()} />\n      </svg>\n      <h2>combining shapes</h2>\n      <svg width={305} height={155}>\n        <path\n          d={new Path().grid(0, 0, 300, 150, 10, 10).toString()}\n          style={{ stroke: '#ccc' }}\n        />\n        <path\n          d={new Path().polyline(0, 100, 300, data).toString()}\n          style={{ stroke: 'green', strokeWidth: 2 }}\n        />\n      </svg>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}